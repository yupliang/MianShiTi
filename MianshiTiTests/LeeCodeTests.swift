//
//  LeeCodeTests.swift
//  MianshiTiTests
//
//  Created by app-01 on 2019/8/15.
//  Copyright Â© 2019 QiQiuZhe. All rights reserved.
//

import XCTest

class LeeCodeTests: XCTestCase {
    
    var s:Solution66!
    
    override func setUp() {
        // Put setup code here. This method is called before the invocation of each test method in the class.
        s = Solution66()
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        s = nil
    }

    func testExample() {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }
    
    func test66() -> Void {
        
        var r = s.plusOne([1,2,3])
        XCTAssertEqual([1,2,4], r)
        r = s.plusOne([4,3,2,1])
        XCTAssertEqual([4,3,2,2], r)
        r = s.plusOne([9])
        XCTAssertEqual([1,0], r)
        r = s.plusOne([9,9])
        XCTAssertEqual([1,0,0], r)
        r = s.plusOne([8,9,9,9])
        XCTAssertEqual([9,0,0,0], r)
    }
    
    func testSuperPow() -> Void {
        var r = s.superPow(2, [3])
        XCTAssertEqual(r, 8)
        r = s.superPow(2, [1,0])
        XCTAssertEqual(r, 1024)
        r = s.superPow(1, [4,3,8,5,2])
        XCTAssertEqual(1, r)
        r = s.superPow(2147483647, [2,0,0])
        r = s.superPow(78267, [1,7,7,4,3,1,7,0,1,4,4,9,2,8,5,0,0,9,3,1,2,5,9,6,0,9,9,0,9,6,0,5,3,7,9,8,8,9,8,2,5,4,1,9,3,8,0,5,9,5,6,1,1,8,9,3,7,8,5,8,5,5,3,0,4,3,1,5,4,1,7,9,6,8,8,9,8,0,6,7,8,3,1,1,1,0,6,8,1,1,6,6,9,1,8,5,6,9,0,0,1,7,1,7,7,2,8,5,4,4,5,2,9,6,5,0,8,1,0,9,5,8,7,6,0,6,1,8,7,2,9,8,1,0,7,9,4,7,6,9,2,3,1,3,9,9,6,8,0,8,9,7,7,7,3,9,5,5,7,4,9,8,3,0,1,2,1,5,0,8,4,4,3,8,9,3,7,5,3,9,4,4,9,3,3,2,4,8,9,3,3,8,2,8,1,3,2,2,8,4,2,5,0,6,3,0,9,0,5,4,1,1,8,0,4,2,5,8,2,4,2,7,5,4,7,6,9,0,8,9,6,1,4,7,7,9,7,8,1,4,4,3,6,4,5,2,6,0,1,1,5,3,8,0,9,8,8,0,0,6,1,6,9,6,5,8,7,4,8,9,9,2,4,7,7,9,9,5,2,2,6,9,7,7,9,8,5,9,8,5,5,0,3,5,8,9,5,7,3,4,6,4,6,2,3,5,2,3,1,4,5,9,3,3,6,4,1,3,3,2,0,0,4,4,7,2,3,3,9,8,7,8,5,5,0,8,3,4,1,4,0,9,5,5,4,4,9,7,7,4,1,8,7,5,2,4,9,7,9,1,7,8,9,2,4,1,1,7,6,4,3,6,5,0,2,1,4,3,9,2,0,0,2,9,8,4,5,7,3,5,8,2,3,9,5,9,1,8,8,9,2,3,7,0,4,1,1,8,7,0,2,7,3,4,6,1,0,3,8,5,8,9,8,4,8,3,5,1,1,4,2,5,9,0,5,3,1,7,4,8,9,6,7,2,3,5,5,3,9,6,9,9,5,7,3,5,2,9,9,5,5,1,0,6,3,8,0,5,5,6,5,6,4,5,1,7,0,6,3,9,4,4,9,1,3,4,7,7,5,8,2,0,9,2,7,3,0,9,0,7,7,7,4,1,2,5,1,3,3,6,4,8,2,5,9,5,0,8,2,5,6,4,8,8,8,7,3,1,8,5,0,5,2,4,8,5,1,1,0,7,9,6,5,1,2,6,6,4,7,0,9,5,6,9,3,7,8,8,8,6,5,8,3,8,5,4,5,8,5,7,5,7,3,2,8,7,1,7,1,8,7,3,3,6,2,9,3,3,9,3,1,5,1,5,5,8,1,2,7,8,9,2,5,4,5,4,2,6,1,3,6,0,6,9,6,1,0,1,4,0,4,5,5,8,2,2,6,3,4,3,4,3,8,9,7,5,5,9,1,8,5,9,9,1,8,7,2,1,1,8,1,5,6,8,5,8,0,2,4,4,7,8,9,5,9,8,0,5,0,3,5,5,2,6,8,3,4,1,4,7,1,7,2,7,5,8,8,7,2,2,3,9,2,2,7,3,2,9,0,2,3,6,9,7,2,8,0,8,1,6,5,2,3,0,2,0,0,0,9,2,2,2,3,6,6,0,9,1,0,0,3,5,8,3,2,0,3,5,1,4,1,6,8,7,6,0,9,8,0,1,0,4,5,6,0,2,8,2,5,0,2,8,5,2,3,0,2,6,7,3,0,0,2,1,9,0,1,9,9,2,0,1,6,7,7,9,9,6,1,4,8,5,5,6,7,0,6,1,7,3,5,9,3,9,0,5,9,2,4,8,6,6,2,2,3,9,3,5,7,4,1,6,9,8,2,6,9,0,0,8,5,7,7,0,6,0,5,7,4,9,6,0,7,8,4,3,9,8,8,7,4,1,5,6,0,9,4,1,9,4,9,4,1,8,6,7,8,2,5,2,3,3,4,3,3,1,6,4,1,6,1,5,7,8,1,9,7,6,0,8,0,1,4,4,0,1,1,8,3,8,3,8,3,9,1,6,0,7,1,3,3,4,9,3,5,2,4,2,0,7,3,3,8,7,7,8,8,0,9,3,1,2,2,4,3,3,3,6,1,6,9,6,2,0,1,7,5,6,2,5,3,5,0,3,2,7,2,3,0,3,6,1,7,8,7,0,4,0,6,7,6,6,3,9,8,5,8,3,3,0,9,6,7,1,9,2,1,3,5,1,6,3,4,3,4,1,6,8,4,2,5])
    }
    
    func testMypow() -> Void {
        var r = s.myPow(2, 10)
        XCTAssertEqual(1024.0, r)
        r = s.myPow(2.1, 3)
        XCTAssertEqual(9.26100, r, accuracy: 0.0001)
        r = s.myPow(2.0, -2)
        XCTAssertEqual(0.25, r)
    }
    
    func testMod() {
        XCTAssertEqual(-3, -7%4)
    }
    
    func testEnum() {
        for i in 0...3 {
            print(i)
        }
    }
    
//    func testDouble() -> Void {
//        var n:Double = 44.0
//        while n>0 {
//            print(n)
//            n = n >> 1
//        }
//    }
    
    func testFindSubsequences() {
        var r = s.findSubsequences491([4,6])
        XCTAssertEqual([[4,6]], r)
        r = s.findSubsequences491([1,2,3,4,5,6,7,8,9,10,1,1,1,1,1])
        r = s.findSubsequences491([4,6,7,7])
        XCTAssertEqual([[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]].count, r.count)
        r = s.findSubsequences491([4,3,2,1])
        XCTAssertEqual([], r)
        r = s.findSubsequences491([])
        XCTAssertEqual([], r)
    }
    
    func test842() {
        var r = s.splitIntoFibonacci842("2820022842865610841740282445647388119521934031292")
        XCTAssertEqual(r, [28,200,228,428,656,1084,1740,2824,4564,7388,11952,19340,31292])
        r = s.splitIntoFibonacci842("74912134825162255812723932620170946950766784234934")
        r = s.splitIntoFibonacci842("123456579")
        XCTAssertEqual(r, [123,456,579])
        r = s.splitIntoFibonacci842("0123")
        XCTAssertEqual(r, [])
        r = s.splitIntoFibonacci842("11235813")
        XCTAssertEqual(r, [1,1,2,3,5,8,13])
        r = s.splitIntoFibonacci842("112358130")
        XCTAssertEqual(r, [])
        r =  s.splitIntoFibonacci842("214748364721474836422147483641")
    }
    
    func test662() {
        var arr:[Int] = [1,1,1,1,1,1,1,-1000,-1000,-1000,1,-1000,-1000,-1000,-1000,2,2,2,2,2,2,2,-1000,2,-1000,-1000,2,-1000,2]
        var rootNode = s.createTree(&arr)
//        let n1 = TreeNode(1)
//        n1.left = TreeNode(3)
//        n1.right = TreeNode(2)
//        n1.left!.left = TreeNode(5)
//        n1.left!.right = TreeNode(3)
//        n1.right!.right = TreeNode(9)
        var r = s.widthOfBinaryTree662(rootNode)
        XCTAssertEqual(8, r)
        arr = [1,5,8,9,7,7,8,1,4,8,1,9,0,8,7,1,7,4,2,9,8,2,4,-1000,-1000,9,-1000,-1000,-1000,6,0,9,4,1,0,1,8,9,0,1,8,9,1,0,9,6,2,5,-1000,2,3,0,2,4,8,8,8,5,0,0,9,4,9,1,-1000,0,7,2,2,3,-1000,6,1,0,8,9,9,9,4,8,4,3,4,4,0,-1000,-1000,8,3,8,-1000,-1000,0,-1000,0,4,9,1,2,-1000,4,4,0,4,3,5,5,7,4,1,6,-1000,1,0,-1000,-1000,-1000,2,8,7,7,-1000,-1000,0,2,5,5,9,3,3,-1000,7,6,6,7,9,8,1,7,7,7,2,6,-1000,7,-1000,4,6,4,6,-1000,-1000,9,1,-1000,-1000,-1000,5,5,5,4,2,2,8,5,1,1,3,1,3,7,-1000,2,-1000,9,1,4,4,7,7,-1000,1,5,6,2,7,3,-1000,9,1,-1000,2,4,4,8,-1000,-1000,7,-1000,6,-1000,7,4,3,5,8,4,8,5,-1000,-1000,8,-1000,-1000,-1000,4,4,-1000,-1000,-1000,-1000,8,3,5,5,-1000,-1000,-1000,1,2,0,-1000,-1000,9,3,-1000,8,3,7,1,8,9,0,1,8,2,-1000,4,-1000,-1000,8,-1000,-1000,-1000,-1000,2,-1000,4,8,5,5,3,1,-1000,-1000,6,-1000,1,-1000,-1000,6,-1000,-1000,-1000,-1000,7,3,-1000,-1000,-1000,8,6,4,-1000,6,9,0,7,8,-1000,-1000,0,6,7,-1000,-1000,0,0,7,2,3,2,-1000,0,2,3,-1000,0,1,7,9,0,7,-1000,-1000,-1000,-1000,5,8,2,6,3,2,0,4,-1000,-1000,0,9,1,1,1,-1000,1,3,-1000,7,9,1,3,3,8,-1000,-1000,-1000,-1000,6,-1000,-1000,-1000,-1000,9,8,1,3,8,3,0,6,-1000,-1000,8,5,6,5,2,1,-1000,5,-1000,7,0,0,-1000,9,3,9,-1000,3,0,0,9,1,7,0,2,-1000,6,8,5,-1000,-1000,-1000,-1000,-1000,7,-1000,2,5,-1000,-1000,9,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,4,1,-1000,3,6,6,2,5,5,9,-1000,-1000,7,8,-1000,-1000,2,7,3,7,2,5,-1000,1,3,4,-1000,-1000,8,3,6,9,-1000,1,-1000,-1000,-1000,-1000,9,7,5,2,-1000,5,-1000,6,4,5,-1000,1,2,0,6,-1000,1,6,-1000,-1000,5,-1000,7,8,4,7,8,6,4,-1000,5,6,7,9,1,0,4,-1000,-1000,-1000,6,4,8,4,5,-1000,0,4,4,0,1,7,1,-1000,1,-1000,3,6,-1000,-1000,-1000,-1000,8,-1000,5,0,7,5,-1000,-1000,5,8,-1000,-1000,3,-1000,-1000,8,-1000,2,4,-1000,-1000,-1000,-1000,-1000,-1000,-1000,9,-1000,9,-1000,9,-1000,-1000,-1000,-1000,7,1,-1000,-1000,2,-1000,-1000,5,5,5,5,6,4,-1000,-1000,1,6,4,0,-1000,0,6,3,0,-1000,5,5,-1000,-1000,-1000,-1000,2,-1000,3,6,-1000,3,0,5,0,1,0,3,4,9,9,2,7,3,8,6,9,-1000,5,8,-1000,-1000,-1000,-1000,9,8,0,7,-1000,-1000,8,8,6,6,0,2,7,4,2,3,8,6,4,-1000,8,-1000,-1000,-1000,2,0,-1000,1,3,5,4,2,2,5,8,8,-1000,3,0,-1000,1,6,0,-1000,-1000,9,-1000,2,-1000,6,8,2,-1000,-1000,5,-1000,-1000,-1000,9,6,6,4,2,0,-1000,-1000,1,-1000,0,-1000,-1000,-1000,6,6,-1000,-1000,-1000,4,7,9,-1000,0,1,-1000,-1000,9,-1000,-1000,-1000,4,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,4,-1000,6,-1000,3,-1000,-1000,5,1,2,5,-1000,0,7,8,-1000,7,-1000,-1000,4,-1000,4,4,-1000,2,-1000,6,-1000,-1000,-1000,7,-1000,-1000,-1000,-1000,6,4,-1000,6,-1000,6,9,-1000,-1000,-1000,9,6,-1000,9,-1000,3,-1000,2,-1000,7,7,-1000,-1000,0,-1000,6,3,-1000,-1000,-1000,-1000,-1000,-1000,1,-1000,-1000,-1000,6,9,7,-1000,7,-1000,9,3,3,-1000,-1000,-1000,-1000,4,-1000,-1000,3,-1000,-1000,-1000,3,9,-1000,0,3,1,9,6,7,9,4,8,-1000,-1000,6,-1000,1,3,7,-1000,-1000,-1000,3,-1000,2,-1000,8,1,1,-1000,-1000,6,-1000,7,3,5,-1000,6,3,4,-1000,-1000,5,7,1,-1000,-1000,6,4,6,-1000,-1000,-1000,-1000,5,7,0,7,0,-1000,5,8,5,5,4,5,-1000,-1000,-1000,-1000,-1000,-1000,1,7,-1000,-1000,7,-1000,9,9,6,4,-1000,-1000,3,2,1,-1000,0,-1000,0,6,-1000,-1000,-1000,1,5,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,3,4,8,-1000,-1000,9,6,4,-1000,-1000,-1000,-1000,8,9,-1000,1,-1000,-1000,-1000,7,-1000,-1000,-1000,-1000,-1000,9,-1000,-1000,-1000,4,1,6,7,0,-1000,-1000,-1000,7,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,-1000,4,-1000,9,-1000,-1000,-1000,-1000,3,0,6,-1000,5,-1000,9,9,-1000,-1000,4,3,4,-1000,-1000,-1000,-1000,8,-1000,5,-1000,-1000,-1000,-1000,5,2,-1000,-1000,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,2,1,8,5,-1000,0,-1000,0,3,2,4,5,-1000,-1000,-1000,-1000,-1000,7,-1000,-1000,0,-1000,0,-1000,-1000,-1000,0,3,9,-1000,-1000,-1000,-1000,5,-1000,-1000,0,5,0,0,-1000,9,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,9,3,5,9,0,5,9,-1000,-1000,9,4,-1000,0,2,0,-1000,-1000,7,-1000,7,-1000,5,7,8,7,-1000,-1000,-1000,3,0,3,-1000,-1000,-1000,-1000,-1000,4,5,-1000,-1000,2,3,-1000,2,-1000,-1000,7,-1000,-1000,9,-1000,-1000,9,7,1,-1000,-1000,1,6,1,8,-1000,-1000,5,-1000,-1000,3,7,9,6,-1000,-1000,-1000,-1000,1,-1000,-1000,-1000,3,7,3,2,3,3,-1000,1,-1000,-1000,-1000,1,-1000,-1000,4,3,4,8,7,-1000,0,3,0,-1000,1,1,-1000,-1000,-1000,-1000,-1000,5,-1000,6,0,-1000,3,1,-1000,6,-1000,-1000,4,0,1,-1000,6,1,-1000,-1000,9,6,4,9,0,8,9,3,3,6,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,8,5,8,3,5,4,-1000,6,-1000,0,-1000,-1000,6,-1000,4,3,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,7,3,-1000,-1000,1,-1000,2,4,-1000,-1000,-1000,6,-1000,-1000,-1000,6,-1000,5,-1000,-1000,-1000,-1000,1,-1000,-1000,3,-1000,1,-1000,7,1,-1000,-1000,7,1,3,4,8,-1000,-1000,-1000,-1000,-1000,4,-1000,-1000,4,-1000,-1000,-1000,7,-1000,6,-1000,-1000,1,-1000,-1000,-1000,7,3,3,-1000,-1000,-1000,-1000,3,0,-1000,-1000,4,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,9,-1000,-1000,6,6,5,2,-1000,8,3,8,-1000,-1000,-1000,-1000,6,7,0,-1000,-1000,-1000,-1000,1,1,5,-1000,0,5,-1000,5,-1000,-1000,-1000,1,2,-1000,2,9,1,-1000,2,4,1,-1000,-1000,-1000,1,8,4,4,5,2,-1000,-1000,6,4,7,5,2,9,-1000,4,-1000,-1000,-1000,-1000,-1000,3,-1000,-1000,5,9,-1000,-1000,-1000,-1000,9,-1000,9,-1000,-1000,-1000,2,-1000,1,9,-1000,-1000,-1000,-1000,-1000,1,9,3,-1000,-1000,1,9,-1000,5,2,1,0,-1000,-1000,1,9,8,4,7,-1000,-1000,5,7,-1000,-1000,-1000,-1000,1,2,8,-1000,6,0,-1000,-1000,-1000,-1000,0,-1000,-1000,-1000,6,-1000,2,3,0,9,-1000,-1000,1,4,6,-1000,8,-1000,-1000,5,-1000,3,0,-1000,6,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,-1000,2,5,8,6,9,-1000,-1000,-1000,8,-1000,-1000,9,6,-1000,-1000,-1000,-1000,3,-1000,-1000,-1000,-1000,9,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,-1000,8,8,-1000,-1000,-1000,-1000,-1000,9,-1000,6,-1000,2,5,-1000,-1000,1,2,-1000,4,-1000,-1000,4,-1000,-1000,3,5,-1000,3,3,-1000,-1000,1,-1000,-1000,-1000,-1000,4,-1000,2,3,-1000,4,5,3,-1000,7,-1000,-1000,-1000,7,6,-1000,-1000,1,3,-1000,4,9,8,-1000,-1000,0,-1000,3,4,-1000,8,-1000,1,-1000,-1000,2,2,-1000,-1000,4,-1000,-1000,-1000,3,-1000,-1000,2,-1000,-1000,-1000,4,-1000,5,-1000,-1000,-1000,-1000,2,-1000,5,-1000,-1000,-1000,-1000,-1000,-1000,2,7,5,-1000,6,-1000,-1000,-1000,-1000,2,-1000,0,-1000,3,-1000,1,-1000,9,4,-1000,3,-1000,-1000,-1000,-1000,-1000,-1000,-1000,5,5,7,-1000,-1000,1,-1000,4,6,-1000,-1000,-1000,2,-1000,5,9,0,6,2,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,5,-1000,7,-1000,2,9,-1000,-1000,1,-1000,-1000,-1000,1,6,-1000,6,-1000,-1000,0,8,-1000,4,-1000,-1000,-1000,-1000,4,-1000,-1000,0,-1000,6,0,-1000,-1000,-1000,4,-1000,-1000,-1000,-1000,-1000,0,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,0,5,4,2,6,4,5,3,4,-1000,-1000,5,-1000,-1000,-1000,-1000,4,-1000,-1000,3,6,2,0,-1000,6,6,-1000,-1000,-1000,-1000,0,6,-1000,-1000,-1000,3,9,4,-1000,-1000,-1000,-1000,-1000,0,-1000,-1000,6,7,0,-1000,9,2,-1000,3,3,-1000,-1000,8,-1000,3,-1000,-1000,-1000,8,5,3,-1000,2,4,-1000,9,6,9,-1000,-1000,-1000,-1000,6,-1000,6,-1000,5,3,-1000,-1000,-1000,-1000,4,-1000,-1000,-1000,9,0,9,7,1,1,-1000,1,-1000,1,6,-1000,5,-1000,6,-1000,-1000,1,-1000,-1000,-1000,-1000,-1000,-1000,5,-1000,-1000,-1000,-1000,-1000,3,-1000,6,1,-1000,0,2,-1000,-1000,0,-1000,-1000,0,-1000,-1000,-1000,-1000,-1000,3,-1000,-1000,8,-1000,-1000,5,3,3,-1000,-1000,-1000,-1000,-1000,-1000,-1000,3,-1000,-1000,0,8,7,-1000,-1000,8,1,-1000,-1000,-1000,-1000,-1000,-1000,7,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,5,2,-1000,2,6,-1000,-1000,-1000,-1000,-1000,-1000,-1000,1,5,0,-1000,-1000,2,-1000,7,-1000,-1000,6,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,3,-1000,-1000,4,-1000,-1000,2,-1000,-1000,-1000,-1000,0,3,-1000,-1000,-1000,-1000,-1000,7,-1000,8,-1000,-1000,-1000,-1000,8,5,-1000,3,4,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,3,7,-1000,-1000,-1000,4,0,3,-1000,-1000,6,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,0,-1000,-1000,-1000,2,-1000,-1000,-1000,8,2,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,2,5,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,0,5]
        r = s.widthOfBinaryTree662(s.createTree(&arr))
        arr
        
        r = s.widthOfBinaryTree662(s.createTree(&arr))
        print("last r is \(r)")
    }
    
    func testArrayNil() {
        var arr:[Int?] = []
        arr.append(nil)
        arr.append(10)
        print(arr[0])
    }
    
    func testwidthOfBinaryTree662_noIndex() -> Void {
        var arr:[Int] = [1,3,2,5,3,-1000,9]
        var tree = s.createTree(&arr)
        var r = s.widthOfBinaryTree662_noIndex(tree)
        XCTAssertEqual(4, r)
        arr = [1,3,2,5]
        tree = s.createTree(&arr)
        r = s.widthOfBinaryTree662_noIndex(tree)
        XCTAssertEqual(2, r)
        arr = [1,5,8,9,7,7,8,1,4,8,1,9,0,8,7,1,7,4,2,9,8,2,4,-1000,-1000,9,-1000,-1000,-1000,6,0,9,4,1,0,1,8,9,0,1,8,9,1,0,9,6,2,5,-1000,2,3,0,2,4,8,8,8,5,0,0,9,4,9,1,-1000,0,7,2,2,3,-1000,6,1,0,8,9,9,9,4,8,4,3,4,4,0,-1000,-1000,8,3,8,-1000,-1000,0,-1000,0,4,9,1,2,-1000,4,4,0,4,3,5,5,7,4,1,6,-1000,1,0,-1000,-1000,-1000,2,8,7,7,-1000,-1000,0,2,5,5,9,3,3,-1000,7,6,6,7,9,8,1,7,7,7,2,6,-1000,7,-1000,4,6,4,6,-1000,-1000,9,1,-1000,-1000,-1000,5,5,5,4,2,2,8,5,1,1,3,1,3,7,-1000,2,-1000,9,1,4,4,7,7,-1000,1,5,6,2,7,3,-1000,9,1,-1000,2,4,4,8,-1000,-1000,7,-1000,6,-1000,7,4,3,5,8,4,8,5,-1000,-1000,8,-1000,-1000,-1000,4,4,-1000,-1000,-1000,-1000,8,3,5,5,-1000,-1000,-1000,1,2,0,-1000,-1000,9,3,-1000,8,3,7,1,8,9,0,1,8,2,-1000,4,-1000,-1000,8,-1000,-1000,-1000,-1000,2,-1000,4,8,5,5,3,1,-1000,-1000,6,-1000,1,-1000,-1000,6,-1000,-1000,-1000,-1000,7,3,-1000,-1000,-1000,8,6,4,-1000,6,9,0,7,8,-1000,-1000,0,6,7,-1000,-1000,0,0,7,2,3,2,-1000,0,2,3,-1000,0,1,7,9,0,7,-1000,-1000,-1000,-1000,5,8,2,6,3,2,0,4,-1000,-1000,0,9,1,1,1,-1000,1,3,-1000,7,9,1,3,3,8,-1000,-1000,-1000,-1000,6,-1000,-1000,-1000,-1000,9,8,1,3,8,3,0,6,-1000,-1000,8,5,6,5,2,1,-1000,5,-1000,7,0,0,-1000,9,3,9,-1000,3,0,0,9,1,7,0,2,-1000,6,8,5,-1000,-1000,-1000,-1000,-1000,7,-1000,2,5,-1000,-1000,9,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,4,1,-1000,3,6,6,2,5,5,9,-1000,-1000,7,8,-1000,-1000,2,7,3,7,2,5,-1000,1,3,4,-1000,-1000,8,3,6,9,-1000,1,-1000,-1000,-1000,-1000,9,7,5,2,-1000,5,-1000,6,4,5,-1000,1,2,0,6,-1000,1,6,-1000,-1000,5,-1000,7,8,4,7,8,6,4,-1000,5,6,7,9,1,0,4,-1000,-1000,-1000,6,4,8,4,5,-1000,0,4,4,0,1,7,1,-1000,1,-1000,3,6,-1000,-1000,-1000,-1000,8,-1000,5,0,7,5,-1000,-1000,5,8,-1000,-1000,3,-1000,-1000,8,-1000,2,4,-1000,-1000,-1000,-1000,-1000,-1000,-1000,9,-1000,9,-1000,9,-1000,-1000,-1000,-1000,7,1,-1000,-1000,2,-1000,-1000,5,5,5,5,6,4,-1000,-1000,1,6,4,0,-1000,0,6,3,0,-1000,5,5,-1000,-1000,-1000,-1000,2,-1000,3,6,-1000,3,0,5,0,1,0,3,4,9,9,2,7,3,8,6,9,-1000,5,8,-1000,-1000,-1000,-1000,9,8,0,7,-1000,-1000,8,8,6,6,0,2,7,4,2,3,8,6,4,-1000,8,-1000,-1000,-1000,2,0,-1000,1,3,5,4,2,2,5,8,8,-1000,3,0,-1000,1,6,0,-1000,-1000,9,-1000,2,-1000,6,8,2,-1000,-1000,5,-1000,-1000,-1000,9,6,6,4,2,0,-1000,-1000,1,-1000,0,-1000,-1000,-1000,6,6,-1000,-1000,-1000,4,7,9,-1000,0,1,-1000,-1000,9,-1000,-1000,-1000,4,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,4,-1000,6,-1000,3,-1000,-1000,5,1,2,5,-1000,0,7,8,-1000,7,-1000,-1000,4,-1000,4,4,-1000,2,-1000,6,-1000,-1000,-1000,7,-1000,-1000,-1000,-1000,6,4,-1000,6,-1000,6,9,-1000,-1000,-1000,9,6,-1000,9,-1000,3,-1000,2,-1000,7,7,-1000,-1000,0,-1000,6,3,-1000,-1000,-1000,-1000,-1000,-1000,1,-1000,-1000,-1000,6,9,7,-1000,7,-1000,9,3,3,-1000,-1000,-1000,-1000,4,-1000,-1000,3,-1000,-1000,-1000,3,9,-1000,0,3,1,9,6,7,9,4,8,-1000,-1000,6,-1000,1,3,7,-1000,-1000,-1000,3,-1000,2,-1000,8,1,1,-1000,-1000,6,-1000,7,3,5,-1000,6,3,4,-1000,-1000,5,7,1,-1000,-1000,6,4,6,-1000,-1000,-1000,-1000,5,7,0,7,0,-1000,5,8,5,5,4,5,-1000,-1000,-1000,-1000,-1000,-1000,1,7,-1000,-1000,7,-1000,9,9,6,4,-1000,-1000,3,2,1,-1000,0,-1000,0,6,-1000,-1000,-1000,1,5,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,3,4,8,-1000,-1000,9,6,4,-1000,-1000,-1000,-1000,8,9,-1000,1,-1000,-1000,-1000,7,-1000,-1000,-1000,-1000,-1000,9,-1000,-1000,-1000,4,1,6,7,0,-1000,-1000,-1000,7,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,-1000,4,-1000,9,-1000,-1000,-1000,-1000,3,0,6,-1000,5,-1000,9,9,-1000,-1000,4,3,4,-1000,-1000,-1000,-1000,8,-1000,5,-1000,-1000,-1000,-1000,5,2,-1000,-1000,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,2,1,8,5,-1000,0,-1000,0,3,2,4,5,-1000,-1000,-1000,-1000,-1000,7,-1000,-1000,0,-1000,0,-1000,-1000,-1000,0,3,9,-1000,-1000,-1000,-1000,5,-1000,-1000,0,5,0,0,-1000,9,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,9,3,5,9,0,5,9,-1000,-1000,9,4,-1000,0,2,0,-1000,-1000,7,-1000,7,-1000,5,7,8,7,-1000,-1000,-1000,3,0,3,-1000,-1000,-1000,-1000,-1000,4,5,-1000,-1000,2,3,-1000,2,-1000,-1000,7,-1000,-1000,9,-1000,-1000,9,7,1,-1000,-1000,1,6,1,8,-1000,-1000,5,-1000,-1000,3,7,9,6,-1000,-1000,-1000,-1000,1,-1000,-1000,-1000,3,7,3,2,3,3,-1000,1,-1000,-1000,-1000,1,-1000,-1000,4,3,4,8,7,-1000,0,3,0,-1000,1,1,-1000,-1000,-1000,-1000,-1000,5,-1000,6,0,-1000,3,1,-1000,6,-1000,-1000,4,0,1,-1000,6,1,-1000,-1000,9,6,4,9,0,8,9,3,3,6,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,8,5,8,3,5,4,-1000,6,-1000,0,-1000,-1000,6,-1000,4,3,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,7,3,-1000,-1000,1,-1000,2,4,-1000,-1000,-1000,6,-1000,-1000,-1000,6,-1000,5,-1000,-1000,-1000,-1000,1,-1000,-1000,3,-1000,1,-1000,7,1,-1000,-1000,7,1,3,4,8,-1000,-1000,-1000,-1000,-1000,4,-1000,-1000,4,-1000,-1000,-1000,7,-1000,6,-1000,-1000,1,-1000,-1000,-1000,7,3,3,-1000,-1000,-1000,-1000,3,0,-1000,-1000,4,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,9,-1000,-1000,6,6,5,2,-1000,8,3,8,-1000,-1000,-1000,-1000,6,7,0,-1000,-1000,-1000,-1000,1,1,5,-1000,0,5,-1000,5,-1000,-1000,-1000,1,2,-1000,2,9,1,-1000,2,4,1,-1000,-1000,-1000,1,8,4,4,5,2,-1000,-1000,6,4,7,5,2,9,-1000,4,-1000,-1000,-1000,-1000,-1000,3,-1000,-1000,5,9,-1000,-1000,-1000,-1000,9,-1000,9,-1000,-1000,-1000,2,-1000,1,9,-1000,-1000,-1000,-1000,-1000,1,9,3,-1000,-1000,1,9,-1000,5,2,1,0,-1000,-1000,1,9,8,4,7,-1000,-1000,5,7,-1000,-1000,-1000,-1000,1,2,8,-1000,6,0,-1000,-1000,-1000,-1000,0,-1000,-1000,-1000,6,-1000,2,3,0,9,-1000,-1000,1,4,6,-1000,8,-1000,-1000,5,-1000,3,0,-1000,6,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,-1000,2,5,8,6,9,-1000,-1000,-1000,8,-1000,-1000,9,6,-1000,-1000,-1000,-1000,3,-1000,-1000,-1000,-1000,9,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,-1000,8,8,-1000,-1000,-1000,-1000,-1000,9,-1000,6,-1000,2,5,-1000,-1000,1,2,-1000,4,-1000,-1000,4,-1000,-1000,3,5,-1000,3,3,-1000,-1000,1,-1000,-1000,-1000,-1000,4,-1000,2,3,-1000,4,5,3,-1000,7,-1000,-1000,-1000,7,6,-1000,-1000,1,3,-1000,4,9,8,-1000,-1000,0,-1000,3,4,-1000,8,-1000,1,-1000,-1000,2,2,-1000,-1000,4,-1000,-1000,-1000,3,-1000,-1000,2,-1000,-1000,-1000,4,-1000,5,-1000,-1000,-1000,-1000,2,-1000,5,-1000,-1000,-1000,-1000,-1000,-1000,2,7,5,-1000,6,-1000,-1000,-1000,-1000,2,-1000,0,-1000,3,-1000,1,-1000,9,4,-1000,3,-1000,-1000,-1000,-1000,-1000,-1000,-1000,5,5,7,-1000,-1000,1,-1000,4,6,-1000,-1000,-1000,2,-1000,5,9,0,6,2,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,5,-1000,7,-1000,2,9,-1000,-1000,1,-1000,-1000,-1000,1,6,-1000,6,-1000,-1000,0,8,-1000,4,-1000,-1000,-1000,-1000,4,-1000,-1000,0,-1000,6,0,-1000,-1000,-1000,4,-1000,-1000,-1000,-1000,-1000,0,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,0,5,4,2,6,4,5,3,4,-1000,-1000,5,-1000,-1000,-1000,-1000,4,-1000,-1000,3,6,2,0,-1000,6,6,-1000,-1000,-1000,-1000,0,6,-1000,-1000,-1000,3,9,4,-1000,-1000,-1000,-1000,-1000,0,-1000,-1000,6,7,0,-1000,9,2,-1000,3,3,-1000,-1000,8,-1000,3,-1000,-1000,-1000,8,5,3,-1000,2,4,-1000,9,6,9,-1000,-1000,-1000,-1000,6,-1000,6,-1000,5,3,-1000,-1000,-1000,-1000,4,-1000,-1000,-1000,9,0,9,7,1,1,-1000,1,-1000,1,6,-1000,5,-1000,6,-1000,-1000,1,-1000,-1000,-1000,-1000,-1000,-1000,5,-1000,-1000,-1000,-1000,-1000,3,-1000,6,1,-1000,0,2,-1000,-1000,0,-1000,-1000,0,-1000,-1000,-1000,-1000,-1000,3,-1000,-1000,8,-1000,-1000,5,3,3,-1000,-1000,-1000,-1000,-1000,-1000,-1000,3,-1000,-1000,0,8,7,-1000,-1000,8,1,-1000,-1000,-1000,-1000,-1000,-1000,7,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,5,2,-1000,2,6,-1000,-1000,-1000,-1000,-1000,-1000,-1000,1,5,0,-1000,-1000,2,-1000,7,-1000,-1000,6,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,3,-1000,-1000,4,-1000,-1000,2,-1000,-1000,-1000,-1000,0,3,-1000,-1000,-1000,-1000,-1000,7,-1000,8,-1000,-1000,-1000,-1000,8,5,-1000,3,4,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,3,7,-1000,-1000,-1000,4,0,3,-1000,-1000,6,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,0,-1000,-1000,-1000,2,-1000,-1000,-1000,8,2,-1000,-1000,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,2,5,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,2,-1000,-1000,-1000,-1000,-1000,8,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,0,5]
        tree = s.createTree(&arr)
        r = s.widthOfBinaryTree662_noIndex(tree)
        print("last r is \(r)")
    }
    
    func test474() {
        var arr = ["10","0001","111001","1","0"]
        var r = s.findMaxForm474(arr, 5, 3)
        XCTAssertEqual(r, 4)
        arr = ["10","0","1"]
        r = s.findMaxForm474(arr, 1, 1)
        XCTAssertEqual(r, 2)
        arr = ["0","11","1000","01","0","101","1","1","1","0","0","0","0","1","0","0110101","0","11","01","00","01111","0011","1","1000","0","11101","1","0","10","0111"]
        r = s.findMaxForm474(arr, 9, 80)
        XCTAssertEqual(2, r)
    }

    func testStrCharCount() {
        let str = "001"
        for item in str {
            print(item)
        }
        XCTAssertEqual(3, str.count)
    }
    
    func test729() {
        var r = s.book729(10, 20)
        XCTAssertEqual(true, r)
        r = s.book729(15, 25)
        XCTAssertEqual(false, r)
        r = s.book729(20, 30)
        XCTAssertEqual(true, r)
    }
    
    func test416() {
        var r = s.canPartition416([1,5,11,5])
        XCTAssertEqual(true, r)
        r = s.canPartition416([1,2,3,5])
        XCTAssertEqual(false, r)
    }

    func test307() {
        var item = NumArray([1,3,5])
        var r = item.sumRange(0, 2)
        XCTAssertEqual(9, r)
        item.update(1, 2)
        r = item.sumRange(0, 2)
        XCTAssertEqual(8, r)
        
        item = NumArray([])
        item = NumArray([9,-8])
        item.update(0, 3)
        r = item.sumRange(1, 1)
        r = item.sumRange(0, 1)
        item.update(1, -3)
        r = item.sumRange(0, 1)
        
        item = NumArray([-28,-39,53,65,11,-56,-65,-39,-43,97])
        print("")
    }
    
    func test315() -> Void {
        var r = s.countSmaller315([5,2,6,1])
        XCTAssertEqual([2,1,1,0], r)
        r = s.countSmaller315([])
        XCTAssertEqual([], r)
        r = s.countSmaller315([-1,-1])
        XCTAssertEqual([0,0], r)
    }
    func test493() {
        var r = s.reversePairs493([1,3,2,3,1])
        XCTAssertEqual(2, r)
//        var r = s.reversePairs493([-5,-5])
//        XCTAssertEqual(1, r)
    }
    func testForIterator() {
        for i in 0...3 {
            print(i)
        }
    }
    func test29() {
        var r = s.divide(10, 3)
        XCTAssertEqual(3, r)
        r = s.divide(7, -3)
        XCTAssertEqual(-2, r)
        r = s.divide(-2147483648, -1)
        XCTAssertEqual(2147483647, r)
    }
    func test74() {
        var matrix = [
            [1,   3,  5,  7],
            [10, 11, 16, 20],
            [23, 30, 34, 50]
        ]
        var r = s.searchMatrix(matrix, 3)
        XCTAssertEqual(true, r)
        r = s.searchMatrix(matrix, 13)
        XCTAssertEqual(false, r)
        matrix = [[1]]
        r = s.searchMatrix(matrix, 1)
        XCTAssertEqual(true, r)
        matrix = [[1],[3]]
        r = s.searchMatrix(matrix, 3)
        XCTAssertEqual(true, r)
        matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,50]]
        r = s.searchMatrix(matrix, 10)
        XCTAssertEqual(true, r)
    }
    func testhelper74() {
        var row = 0,column = 0
        s.helper74(1, 2, 1, &row, &column)
        XCTAssertEqual(1, row)
        XCTAssertEqual(0, column)
        s.helper74(4, 3, 4, &row, &column)
        XCTAssertEqual(1, row)
        XCTAssertEqual(0, column)
    }
    func test81() {
        var arr = [2,5,6,0,0,1,2]
        var r = s.search(arr, 0)
        XCTAssertEqual(true, r)
        r = s.search(arr, 3)
        XCTAssertEqual(false, r)
        
        arr = [1,1]
        r = s.search(arr, 1)
        XCTAssertEqual(true, r)
    }
    func test162() {
        var nums = [1,2,3,1]
        var r = s.findPeakElement(nums)
        XCTAssertEqual(2, r)
        nums = [1,2,1,3,5,6,4]
        r = s.findPeakElement(nums)
        XCTAssertTrue(r == 1 || r == 5)
    }
    func test174() {
        var arr = [[-1,-5],[4,-3]]
        var r = 0
//            s.calculateMinimumHP(arr)
//        XCTAssertEqual(r, 2)
//        arr = [[-1,-5],[-4,-3]]
//        r = s.calculateMinimumHP(arr)
//        XCTAssertEqual(9, r)
//        arr = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
//        r = s.calculateMinimumHP(arr)
//        XCTAssertEqual(7, r)
//        arr = [[100]]
//        r = s.calculateMinimumHP(arr)
//        XCTAssertEqual(1, r)
        
        arr = [[-17,-89,-16,-29,-40,35,-31,-46,-53,-36,-25,47,-42,15,45,26,-62,36,-21,-53,-73,-17,-19,3,-86,-38,1,-55,-56,-29,-3,-68,-43,-58,-7,18,-86,-91,-7,37,-7,42,-67,-92,-88,-58,-59,-93,-74,-19,18,-40,28,0,-12,21,-96,-96,18,10,29,26,-1,-44,19,-11,-60,-6,-7,-40,15,-9,-34,26,-57,11,-42,-10,-29,-47,-92,-70,-35,31,-59,-28,-23,-23,-67,-2,-92,-71,-87,-80,-42,16,-75,-3,-79,39,-78,-94,-28,-91,21,-84,12,37,-18,-7,-83,11,-67,34,-67,-96,19,-47,-58,46,-93,12,-39,-66,-78,-64,14,39,-14,28],[-15,-98,12,-64,-50,4,39,-16,-71,14,43,15,13,-75,-25,41,-58,3,27,29,-71,-98,-84,-18,-64,44,-58,-27,-27,49,-15,43,17,-11,-66,-17,-96,18,-19,30,-26,-95,-96,-2,-37,-88,-66,-10,-41,41,-64,-34,-58,41,-14,40,-45,37,-53,-42,10,-69,-87,-99,45,-31,29,-29,16,19,-51,-4,-33,25,-41,-16,-50,33,-26,31,31,-78,-64,-81,19,45,-46,-96,-49,28,44,23,1,-45,-21,-33,-22,-59,-84,-54,-71,-13,-88,39,-22,-15,-23,1,16,-5,-55,24,-87,-42,-67,-18,-81,44,19,15,-80,-20,30,7,41,-61,-26,-96,9,42],[-22,-77,-69,17,43,-5,-79,16,16,-3,-74,50,1,0,6,-18,46,-95,39,45,-37,-4,-9,-45,-25,-34,6,-81,-51,-40,44,-38,35,-84,-1,-39,-45,-50,-30,-38,37,-37,23,-42,-64,-17,23,-15,-64,-2,-64,-20,-99,-48,22,-24,-98,-64,-66,38,-21,6,17,1,18,-18,-49,5,1,-6,-54,45,4,-1,14,-29,-39,-14,1,-47,-25,-60,-29,-76,-46,-42,-31,-96,-99,42,33,-67,-61,7,39,-34,-87,47,15,-8,-97,-71,-69,42,-29,4,13,-15,-59,48,-51,-67,35,-77,-51,19,-24,-54,-99,-47,-90,31,50,-50,48,8,-70,-84,-69,-99],[31,-85,34,-18,-64,-92,41,19,46,50,43,-74,-67,-89,15,45,-85,-55,-87,8,-24,-27,36,-77,-80,-50,48,-54,-100,-43,4,37,-76,0,-75,-85,-90,-54,0,-95,-64,10,-68,-11,-56,19,-8,16,7,-13,-24,-75,1,-18,-8,-96,-41,32,19,-36,-29,-63,-96,-52,27,40,-2,-45,-14,-43,-97,-57,-85,33,-86,-34,-62,-20,-58,26,11,-58,7,-50,-55,-51,-54,-51,-49,27,-18,35,-65,-86,45,22,-89,-81,-50,-17,-23,-73,-55,-51,-11,-96,24,-100,-28,-75,34,-14,-28,-23,26,34,-83,-65,45,42,-75,-25,13,30,-1,-57,43,-61,44,-23],[-22,29,19,-6,47,22,-49,-34,-58,-44,-20,14,-26,27,10,-88,-17,-46,-85,6,18,-18,-15,48,-45,-89,-24,-45,-19,-74,-72,-68,-3,-15,-51,-20,4,22,-31,26,-32,43,-17,38,-22,-6,-96,-71,-30,-14,28,38,12,26,8,-72,-19,-78,-47,-72,-79,38,-4,-15,-33,-68,29,-5,-64,35,-36,12,29,-73,2,-48,3,-95,-86,48,-28,20,-52,-82,8,49,1,-64,-3,-64,-58,-92,-97,-44,40,-94,-74,27,-10,3,-70,17,-98,-33,-26,-89,-15,-3,-11,-69,10,-53,-3,27,-49,-85,-92,-4,-25,-36,14,-25,-63,25,-73,-79,36,-7,-74,-78],[-89,-40,28,-98,47,24,44,-18,-80,33,-36,48,-90,-78,-84,-28,29,-45,-95,36,-92,-49,-3,-36,-53,40,4,-67,-81,18,-73,-68,35,-82,-79,18,-77,-22,-25,-97,28,-40,22,-21,-60,12,-54,-70,-29,-12,3,-24,-15,-79,-82,29,44,-85,-5,-64,-55,-25,40,48,-54,39,-80,-23,6,-7,28,-85,43,-40,-23,39,46,-78,-29,-68,-53,-19,-68,-72,29,13,-99,-46,-6,39,-86,-61,-77,-1,11,-82,23,34,33,-60,3,42,-50,13,26,-13,24,-47,-14,-56,15,-95,-88,-7,29,-97,29,-8,-8,-88,49,-19,3,-31,40,-35,15,-69,-75,-86],[-83,44,-29,-27,-100,21,-3,30,-24,24,10,-45,-5,-45,-15,-96,-99,-31,-16,-7,-83,-23,-69,-1,27,-94,3,-21,18,6,-99,-14,-18,-93,-20,-77,-55,26,47,-77,-91,-39,-99,50,39,-87,14,1,41,-3,-27,2,-47,31,-72,-33,3,21,-35,-47,-92,-19,-62,-53,-97,-33,26,-92,-1,-9,-14,-6,-22,-51,2,35,-65,-16,-83,33,-83,-66,9,0,18,36,23,-31,41,-60,-10,-95,-97,-28,-84,-81,-37,20,-52,-45,6,-55,-30,-99,3,28,-77,-23,-51,46,-98,-9,-20,-58,46,-80,17,39,-79,-95,-81,40,39,-1,-53,-91,-58,-62,-70,46],[43,-15,-1,-38,-36,-48,-98,-22,-53,-13,40,-28,-6,-72,-55,-68,-22,-77,-22,-64,-73,-68,27,-30,-88,47,-66,10,-73,-14,26,-39,37,-80,-69,-14,-9,-59,-29,-2,-62,-82,42,-62,10,-52,-64,-32,-49,-57,1,-35,9,46,-83,11,-72,3,25,37,-98,-24,2,-98,-2,-18,-3,-92,-96,-7,-78,-83,-40,-53,-60,-12,35,-29,4,-53,7,7,-2,-50,-58,-32,-24,-22,-12,-16,39,-42,29,-25,-55,-94,-79,-40,-68,24,14,-61,-97,-94,5,27,-25,30,-95,-58,-27,-99,-51,-61,-22,-65,-3,-43,-79,41,10,34,-60,-82,-92,-31,-69,-35,-91,16],[-12,8,-62,-12,-74,-84,-56,48,-66,-90,-46,-99,-63,8,-45,-55,-52,-88,2,39,15,37,31,16,-60,-100,-72,-46,-2,-44,-76,-40,-53,-48,10,-70,-22,42,-31,-93,-1,-24,-51,35,-44,42,-16,-73,-57,8,18,34,8,-77,-78,-17,-52,9,-62,47,11,34,-45,46,-22,13,-18,-48,22,-63,46,-12,-78,48,-97,-11,4,-37,-64,-25,-36,50,-16,-39,-67,45,-89,19,4,-23,21,23,-2,-19,-18,37,-14,-26,-90,-20,-75,-92,-43,-75,18,46,25,14,5,-55,-75,45,29,32,49,-80,-4,13,-35,-90,39,16,10,4,-95,-27,47,4,-4,-2],[43,-37,-21,-6,-94,-66,35,-19,18,-17,15,-51,14,-13,-51,-34,-35,-37,-35,-3,37,-38,-73,21,-76,-66,-70,-64,-21,-34,-14,-29,-66,6,11,-61,25,21,26,10,49,-69,-17,-42,-52,45,4,-2,-73,41,-65,47,-63,-95,-62,-32,-17,-60,-54,26,-79,21,-70,43,47,-61,37,-42,-61,-96,8,33,-88,-59,35,-39,-3,17,-93,-96,23,-57,-80,-21,-79,-6,-73,-60,-89,15,-47,-7,22,-29,-67,-51,-12,-21,12,8,-56,31,-87,-80,-32,9,14,2,-29,14,27,-35,-52,-27,40,9,-47,41,19,-19,-53,32,-78,26,12,-93,-39,-59,49,-43],[-48,18,20,-15,-89,41,31,-91,-11,-48,-67,-36,-87,6,-46,2,-37,-14,39,-95,19,-96,-37,12,-79,-56,-60,-99,-71,-97,20,-79,-69,-35,37,3,-59,27,-31,25,-93,42,-10,50,-87,-9,-95,40,30,-42,48,-49,-25,-66,-54,6,-57,7,-60,19,24,41,3,14,-72,-61,-73,-67,47,-1,-86,-77,9,3,-49,-33,-99,27,-95,-94,-41,2,27,-72,-5,-13,38,-53,16,-22,-54,16,-67,-38,-29,-85,-79,42,48,-71,43,-76,5,-98,-68,-25,18,49,35,-84,-55,48,-47,23,24,46,-88,-31,26,-76,19,-70,27,-47,45,-21,-92,-76,-75,27],[-34,25,-49,-49,-93,-84,-38,23,32,-57,-6,-24,-92,-36,-12,-8,46,-6,-46,-65,-32,2,35,39,-56,23,13,-42,-46,0,10,-13,26,46,-46,-37,29,44,-3,-85,-67,-98,14,-93,-52,-49,-9,-89,36,-75,9,6,-65,7,-22,9,43,36,-25,-31,-64,-48,-39,-100,-93,-47,-46,-47,-63,-62,-23,-79,-2,2,3,-21,-81,-64,-68,-67,-18,-59,26,-74,29,-73,36,20,-86,-34,3,2,-76,-5,18,-81,-25,23,-72,-67,22,-56,-24,21,-13,7,-97,-83,-53,-87,31,26,33,22,-33,-18,-68,48,-53,-64,-45,1,11,46,6,-70,21,18,-8,-49],[-96,29,28,-57,21,-86,12,0,-89,48,-17,-90,-88,-17,-30,-76,41,-9,-69,-10,-14,12,-51,21,-50,-100,-21,39,-97,-78,-85,-99,-42,11,-78,16,-88,-11,41,-87,32,18,-85,-49,20,29,43,4,14,-48,-15,-27,-96,-84,31,-46,18,-9,-87,-89,-10,27,-5,29,-47,-95,33,-43,24,-83,32,-98,-72,7,7,-72,-91,46,35,-70,-47,-67,-68,35,-4,-65,-3,-15,-38,-65,-59,-22,-9,-19,-14,-96,32,-26,22,-68,3,36,26,-36,-9,37,13,-28,6,-100,-76,30,25,-94,16,-21,38,-54,-41,-25,-26,-68,9,19,-45,-41,-96,49,-92,-87],[-78,31,3,-40,11,-25,-75,24,2,10,-7,24,-94,47,-69,-73,-22,-27,-30,27,-63,-28,-96,6,46,-22,17,21,-16,-22,9,37,-85,31,-53,-7,16,-8,-61,-21,49,44,-8,-71,-21,-69,-99,49,-90,18,2,-76,-43,37,-43,-30,38,-88,-18,36,-75,-87,-31,-38,-72,46,-46,-63,40,-34,-42,-3,-74,22,-15,4,24,14,-78,-14,-10,25,-86,16,40,-16,37,-56,-26,-28,-79,-6,-89,-42,-47,40,-82,-27,-60,-32,13,38,47,-10,19,1,-62,20,30,-32,-54,-88,-78,-4,-66,40,-93,-77,-72,-24,-40,19,-25,-60,2,-3,-57,-22,-52,-78],[4,41,13,5,42,-7,-30,-72,6,24,-87,27,32,-7,-82,-56,28,-22,48,-5,40,-43,39,42,-42,-50,-49,2,-51,17,-9,3,-99,21,-20,-93,-28,39,-24,-13,45,36,40,29,25,21,21,46,40,-70,-23,27,-20,-26,-46,37,-67,-82,39,-24,-25,-54,-92,-90,49,10,-25,-4,-35,-82,-30,-48,28,-17,-25,-44,42,4,-48,-59,-85,-56,-63,12,-49,50,18,-91,-26,26,-16,20,-59,49,30,-39,30,-41,-97,-49,-73,-94,-95,-100,-55,-60,-79,34,-42,-6,-66,-28,-78,-83,-78,-90,-63,-15,-50,-44,-74,-56,36,-90,-32,-100,-77,22,37,-21],[-24,-9,23,-29,-3,26,37,-74,-86,-74,-100,-89,-44,19,26,-8,-28,-39,-5,10,10,-70,-76,-72,32,-28,-31,29,-45,22,-29,-19,8,31,48,-11,-6,22,-75,-85,-54,-3,-38,-68,-27,-69,-81,-92,-18,-50,-12,49,-20,34,22,-18,-78,-11,16,28,-90,-39,9,50,-91,-86,-98,49,-57,31,18,7,-70,35,-5,-40,-48,-28,-89,39,-29,44,-27,-20,-39,-56,-58,47,-58,-85,39,3,44,-64,-65,-58,-63,38,42,3,10,21,34,-8,-3,-100,-25,-23,-23,-49,-25,-57,-92,8,-73,32,-17,-31,-26,46,44,-73,43,9,-24,36,44,-90,-3,7],[36,27,-81,-41,11,-95,-39,3,17,-88,-95,4,31,17,-53,-61,39,-99,15,-17,40,-28,-26,-21,-79,-17,-35,-7,5,-41,26,-34,-57,-70,-4,-11,-59,-11,3,-91,-67,-46,-49,-93,-60,-24,-81,-46,-66,-54,-9,-11,-71,-32,-97,26,-91,-23,-20,-48,-68,-95,-2,-24,1,45,-29,37,-42,43,-78,-38,-6,-97,-55,43,9,-65,-34,-74,-100,-10,-86,25,-93,-48,-25,5,-46,28,32,-86,-33,-90,19,-49,-67,-45,1,17,24,11,10,-54,-87,-72,7,-11,5,-9,-45,-57,-40,-92,-44,-57,5,-9,-29,-46,46,-75,21,-79,-75,-29,-13,28,14,-25],[-99,-68,-16,-60,-14,45,30,-20,18,-18,27,-6,-41,-81,-98,24,0,-98,-77,20,-41,17,2,-90,19,1,-38,20,6,-50,21,0,-81,-98,-38,11,-27,-72,-96,41,-47,8,29,3,-47,-23,-19,33,7,-44,-55,-38,-15,10,-81,-66,0,-77,20,-90,-33,-8,-82,-15,-20,23,-7,-27,43,-66,-64,-59,5,-69,36,-42,-84,-41,-3,-30,6,23,34,-74,-20,-68,-66,-76,-70,-44,22,-42,4,-81,46,1,-71,-78,-51,-87,16,-92,37,-28,41,-61,-32,-32,8,-33,-59,-89,-52,-35,-74,-13,38,-37,28,2,-60,-86,-71,7,-63,5,-23,-76,3,-10],[-3,11,12,-63,-9,-35,-69,-33,-8,-92,-48,-8,29,22,35,49,17,-10,-68,47,-42,-91,-36,10,-79,7,-35,-92,-1,-8,-34,-74,-5,47,0,37,-38,27,-8,-90,20,-59,-25,-63,-43,-14,-7,-53,-75,-12,-100,32,-64,-37,-73,-12,23,-98,-33,-21,38,-84,-56,48,37,2,-95,-65,10,-82,50,-4,47,-24,-19,14,-86,33,18,-18,-37,26,-9,21,-5,-51,-55,-12,-4,-33,36,13,46,-54,-100,-82,-7,-89,37,-32,-9,4,-59,-23,-21,-97,-26,-97,-77,7,-6,-59,-41,21,-75,-5,2,-19,26,-93,-37,50,-18,-13,-78,-26,-75,-72,29,-25],[2,8,-74,15,-19,-26,47,-22,32,17,-53,-84,-13,-17,50,-10,-3,37,-18,-49,-2,-5,-82,-96,-89,-98,-31,-74,-24,6,14,-90,-5,-5,21,-39,1,24,-15,-94,-13,29,38,-72,-31,-74,30,-25,30,-85,13,29,-86,36,-19,-19,29,-34,-9,-54,-26,-81,-93,12,39,-15,-19,-30,31,2,21,-21,-50,-56,-23,-65,-91,29,16,-57,-41,16,-33,12,-66,-10,-19,-97,-18,-58,30,-44,-45,35,12,10,-18,-22,-96,-25,-83,-63,4,-25,36,-12,-66,-44,-27,-6,44,-42,-95,-50,-93,-76,-23,-85,-57,-78,50,-90,-13,-29,-98,-47,-96,-30,-45,-71]]
        r = s.calculateMinimumHP(arr)
        XCTAssertEqual(888, r)
    }
    func test287() -> Void {
        var arr = [1,3,4,2,2]
        var r = s.findDuplicate(arr)
        XCTAssertEqual(2, r)
        arr = [3,1,3,4,2]
        r = s.findDuplicate(arr)
        XCTAssertEqual(3, r)
        arr = [2,5,9,6,9,3,8,9,7,1]
        r = s.findDuplicate(arr)
        XCTAssertEqual(9, r)
    }
    func test53() -> Void {
        let arr = [-2,1,-3,4,-1,2,1,-5,4]
        let r = s.maxSubArray(arr)
        XCTAssertEqual(6, r)
    }
    func testPerformanceExample() {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
            let r = s.divide(-2147483648, -1)

        }
    }

}
